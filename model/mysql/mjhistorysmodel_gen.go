// Code generated by goctl. DO NOT EDIT.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	mjHistorysFieldNames          = builder.RawFieldNames(&MjHistorys{})
	mjHistorysRows                = strings.Join(mjHistorysFieldNames, ",")
	mjHistorysRowsExpectAutoSet   = strings.Join(stringx.Remove(mjHistorysFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	mjHistorysRowsWithPlaceHolder = strings.Join(stringx.Remove(mjHistorysFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	mjHistorysModel interface {
		Insert(ctx context.Context, data *MjHistorys) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MjHistorys, error)
		Update(ctx context.Context, data *MjHistorys) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMjHistorysModel struct {
		conn  sqlx.SqlConn
		table string
	}

	MjHistorys struct {
		Id        int64     `db:"id"`
		UserId    int64     `db:"user_id"`
		Prompt    string    `db:"prompt"`
		Response  string    `db:"response"`
		HdImage   string    `db:"hd_image"`
		SessionId string    `db:"session_id"`
		Seed      int64     `db:"seed"`
		Width     int64     `db:"width"`    // 图片分辨率宽度
		Height    int64     `db:"height"`   // 图片分辨率高度
		OptType   int64     `db:"opt_type"` // 操作类型 1 是generate 2 是u 3 是 v 4 是超分 5 是色彩增强
		CreatedAt time.Time `db:"created_at"`
		Status    int64     `db:"status"`
	}
)

func newMjHistorysModel(conn sqlx.SqlConn) *defaultMjHistorysModel {
	return &defaultMjHistorysModel{
		conn:  conn,
		table: "`mj_historys`",
	}
}

func (m *defaultMjHistorysModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultMjHistorysModel) FindOne(ctx context.Context, id int64) (*MjHistorys, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", mjHistorysRows, m.table)
	var resp MjHistorys
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMjHistorysModel) Insert(ctx context.Context, data *MjHistorys) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, mjHistorysRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Prompt, data.Response, data.HdImage, data.SessionId, data.Seed, data.Width, data.Height, data.OptType, data.Status)
	return ret, err
}

func (m *defaultMjHistorysModel) Update(ctx context.Context, data *MjHistorys) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, mjHistorysRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Prompt, data.Response, data.HdImage, data.SessionId, data.Seed, data.Width, data.Height, data.OptType, data.Status, data.Id)
	return err
}

func (m *defaultMjHistorysModel) tableName() string {
	return m.table
}
